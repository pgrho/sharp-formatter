<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension="ts" #>
module Shipwreck {
	export enum SymbolPosition {
		Parenthesis,
		Left,
		LeftWithSpace,
		Right,
		RightWithSpace,
	}
	export enum SymbolNegativePattern {
		SignNumberSpaceSymbol,
		SignNumberSymbol,
		SignSymbolNumber,
		SymbolSignNumber,
		SymbolNumberSign,
		NumberSignSymbol,
		NumberSymbolSign,
		SignSymbolSpaceNumber,
		NumberSpaceSymbolSign,
		SymbolSpaceNumberSign,
		SymbolSpaceSignNumber,
		NumberSignSpaceSymbol,
		ParenthesizedLeft,
		ParenthesizedLeftWithSpace,
		ParenthesizedRight,
		ParenthesizedRightWithSpace,
	}
	export class CultureInfo {
		
		private static _cache: { [name: string]: CultureInfo };
		private static _invariantCulture : CultureInfo;
		private static _currentCulture: CultureInfo;
		
		public name: string;
		public positiveSign: string;
		public negativeSign: string;
		
		public positiveInifinitySymbol: string;
		public negativeInifinitySymbol: string;
		public NaNSymbol: string;

		public numberDecimalSeparator: string;
		public numberDecimalDigits: number;
		public numberNegativePattern: SymbolPosition;
		public numberGroupSeparator: string;
		public numberGroupSizes: number[];
		
		public currencySymbol: string;
		public currencyPositivePattern: SymbolPosition;
		public currencyNegativePattern: SymbolNegativePattern;
		public currencyDecimalDigits: number;
		public currencyDecimalSeparator: string;
		public currencyGroupSeparator: string;
		public currencyGroupSizes: number[];
		
		public percentSymbol: string;
		public percentPositivePattern: SymbolPosition;
		public percentNegativePattern: SymbolNegativePattern;
		public percentDecimalDigits: number;
		public percentDecimalSeparator: string;
		public percentGroupSeparator: string;
		public percentGroupSizes: number[];
		
		private constructor(name: string, positiveSign: string, negativeSign: string
		, positiveInifinitySymbol: string, negativeInifinitySymbol: string, NaNSymbol: string
		, numberDecimalSeparator: string, numberDecimalDigits: number
		, numberNegativePattern: SymbolPosition, numberGroupSeparator: string, numberGroupSizes: number[]
		, currencySymbol: string, currencyPositivePattern: SymbolPosition, currencyNegativePattern: SymbolNegativePattern
		, currencyDecimalDigits: number, currencyDecimalSeparator: string, currencyGroupSeparator: string, currencyGroupSizes: number[]
		, percentSymbol: string, percentPositivePattern: SymbolPosition, percentNegativePattern: SymbolNegativePattern
		, percentDecimalDigits: number, percentDecimalSeparator: string, percentGroupSeparator: string, percentGroupSizes: number[]) {
			this.name = name;
			this.positiveSign = positiveSign;
			this.negativeSign = negativeSign;

			this.positiveInifinitySymbol = positiveInifinitySymbol;
			this.negativeInifinitySymbol = negativeInifinitySymbol;
			this.NaNSymbol = NaNSymbol;

			this.numberDecimalSeparator = numberDecimalSeparator;
			this.numberDecimalDigits = numberDecimalDigits;
			this.numberNegativePattern = numberNegativePattern;
			this.numberGroupSeparator = numberGroupSeparator;
			this.numberGroupSizes = numberGroupSizes;

			this.currencySymbol = currencySymbol;
			this.currencyPositivePattern = currencyPositivePattern;
			this.currencyNegativePattern = currencyNegativePattern;
			this.currencyDecimalDigits = currencyDecimalDigits;
			this.currencyDecimalSeparator = currencyDecimalSeparator;
			this.currencyGroupSeparator = currencyGroupSeparator ;
			this.currencyGroupSizes = currencyGroupSizes;

			this.percentSymbol = percentSymbol;
			this.percentPositivePattern = percentPositivePattern;
			this.percentNegativePattern = percentNegativePattern;
			this.percentDecimalDigits = percentDecimalDigits;
			this.percentDecimalSeparator = percentDecimalSeparator;
			this.percentGroupSeparator = percentGroupSeparator ;
			this.percentGroupSizes = percentGroupSizes;
		}

		public static get invariantCulture() : CultureInfo {
			return CultureInfo._invariantCulture || (CultureInfo._invariantCulture = <#= GetCulture("\"\"", CultureInfo.InvariantCulture) #>);
		}

		public static get currentCulture() : CultureInfo {
			return CultureInfo._currentCulture || (CultureInfo._currentCulture = CultureInfo.getCulture((navigator as any).userLanguage || (navigator as any).browserLanguage || navigator.language));
		}

		public static getCulture(name: string): CultureInfo {
			if (name) {
				var k = name.substring(0, 2).toLowerCase();
				var c : CultureInfo;
				if (CultureInfo._cache) {
					c = CultureInfo._cache[k];
					if (c) {
						return c;
					}
				} else {
					CultureInfo._cache = {};
				}
				switch (k) {
<#
foreach(var g in CultureInfo.GetCultures(CultureTypes.NeutralCultures).Where(e => e.Name?.Length == 2).GroupBy(e => GetCulture(null, e)))
{
	foreach (var c in g) {
#>
					case "<#= c.Name.ToLower() #>":
<#
	}
#>
						c = <#= GetCulture("k", g.First()) #>;
						break;
<#
}
#>
				}
				if (c) {
					CultureInfo._cache[k] = c;
					return c;
				}
			}
			return CultureInfo.invariantCulture;
		}
	}
}
<#+
	public string GetCulture(string name, CultureInfo c) {
		var n = c.NumberFormat;
		string nnp;
		switch (n.NumberNegativePattern) {
			case 0:
				nnp = "Parenthesis";
				break;
			case 2:
				nnp = "LeftWithSpace";
				break;
			case 3:
				nnp = "Right";
				break;
			case 4:
				nnp = "RightWithSpace";
				break;
			case 1:
			default:
				nnp = "Left";
				break;
		}
		string cpp;
		switch	(n.CurrencyPositivePattern) {
			case 1:
				cpp = "Right";
				break;
			case 2:
				cpp = "LeftWithSpace";
				break;
			case 3:
				cpp = "RightWithSpace";
				break;
			case 0:
			default:
				cpp = "Left";
				break;
		}
		string cnp;
		switch (n.CurrencyNegativePattern) {
			case 1:
				cnp = "SignSymbolNumber";
				break;
			case 2:
				cnp = "SymbolSignNumber";
				break;
			case 3:
				cnp = "SymbolNumberSign";
				break;
			case 4:
				cnp = "ParenthesiedRight";
				break;
			case 5:
				cnp = "SignNumberSymbol";
				break;
			case 6:
				cnp = "NumberSignSymbol";
				break;
			case 7:
				cnp = "NumberSymbolSign";
				break;
			case 8:
				cnp = "SignNumberSpaceSymbol";
				break;
			case 9:
				cnp = "SignSymbolSpaceNumber";
				break;
			case 10:
				cnp = "NumberSpaceSymbolSign";
				break;
			case 11:
				cnp = "SymbolSpaceNumberSign";
				break;
			case 12:
				cnp = "SymbolSpaceSignNumber";
				break;
			case 13:
				cnp = "NumberSignSpaceSymbol";
				break;
			case 14:
				cnp = "ParenthesizedLeftWithSpace";
				break;
			case 15:
				cnp = "ParenthesizedRightWithSpace";
				break;
			case 0:
			default:
				cnp = "ParenthesizedLeft";
				break;
		}

		string ppp;
		switch	(n.PercentPositivePattern) {
			case 1:
				ppp = "Right";
				break;
			case 2:
				ppp = "Left";
				break;
			case 3:
				ppp = "LeftWithSpace";
				break;
			case 0:
			default:
				ppp = "RightWithSpace";
				break;
		}
		string pnp;
		switch (n.PercentNegativePattern) {
			case 1:
				pnp = "SignNumberSymbol";
				break;
			case 2:
				pnp = "SignSymbolNumber";
				break;
			case 3:
				pnp = "SymbolSignNumber";
				break;
			case 4:
				pnp = "SymbolNumberSign";
				break;
			case 5:
				pnp = "NumberSignSymbol";
				break;
			case 6:
				pnp = "NumberSymbolSign";
				break;
			case 7:
				pnp = "SignSymbolSpaceNumber";
				break;
			case 8:
				pnp = "NumberSpaceSymbolSign";
				break;
			case 9:
				pnp = "SymbolSpaceNumberSign";
				break;
			case 10:
				pnp = "SymbolSpaceSignNumber";
				break;
			case 11:
				pnp = "NumberSignSpaceSymbol";
				break;
			case 0:
			default:
				pnp = "SignNumberSpaceSymbol";
				break;
		}
		return $"new CultureInfo({name}, \"{n.PositiveSign}\", \"{n.NegativeSign}\""
				+ $", \"{n.PositiveInfinitySymbol}\", \"{n.NegativeInfinitySymbol}\", \"{n.NaNSymbol}\""
				+ $", \"{n.NumberDecimalSeparator}\", {n.NumberDecimalDigits}, SymbolPosition.{nnp}, \"{n.NumberGroupSeparator}\", [{string.Join(", ", n.NumberGroupSizes)}]"
				+ $", \"{n.CurrencySymbol}\", SymbolPosition.{cpp}, SymbolNegativePattern.{cnp}, {n.CurrencyDecimalDigits}"
				+ $", \"{n.CurrencyDecimalSeparator}\", \"{n.CurrencyGroupSeparator}\", [{string.Join(",", n.CurrencyGroupSizes)}]"
				+ $", \"{n.PercentSymbol}\", SymbolPosition.{ppp}, SymbolNegativePattern.{pnp}, {n.PercentDecimalDigits}"
				+ $", \"{n.PercentDecimalSeparator}\", \"{n.PercentGroupSeparator}\", [{string.Join(",", n.PercentGroupSizes)}])";
	}
#>