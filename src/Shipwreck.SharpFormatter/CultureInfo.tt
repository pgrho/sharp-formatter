<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension="ts" #>
module Shipwreck {
	export enum SymbolPosition {
		Parenthesis,
		Left,
		LeftWithSpace,
		Right,
		RightWithSpace,
	}
	export enum PercentNegativePattern {
		SignNumberSpacePercent,
		SignNumberPercent,
		SignPercentNumber,
		PercentSignNumber,
		PercentNumberSign,
		NumberSignPercent,
		NumberPercentSign,
		SignPercentSpaceNumber,
		NumberSpacePercentSign,
		PercentSpaceNumberSign,
		PercentSpaceSignNumber,
		NumberSignSpacePercent
	}
	export class CultureInfo {
		
		private static _cache: { [name: string]: CultureInfo };
		private static _invariantCulture : CultureInfo;
		private static _currentCulture: CultureInfo;
		
		public name: string;
		public positiveSign: string;
		public negativeSign: string;
		public numberDecimalSeparator: string;
		public numberDecimalDigits: number;
		public numberNegativePattern: SymbolPosition;
		public numberGroupSeparator: string;
		public numberGroupSizes: number[];
		
		public percentSymbol: string;
		public percentPositivePattern: SymbolPosition;
		public percentNegativePattern: PercentNegativePattern;
		public percentDecimalDigits: number;
		public percentDecimalSeparator: string;
		public percentGroupSeparator: string;
		public percentGroupSizes: number[];
		
		private constructor(name: string, positiveSign: string, negativeSign: string, numberDecimalSeparator: string, numberDecimalDigits: number
		, numberNegativePattern: SymbolPosition, numberGroupSeparator: string, numberGroupSizes: number[]
		, percentSymbol: string, percentPositivePattern: SymbolPosition, percentNegativePattern: PercentNegativePattern
		, percentDecimalDigits: number, percentDecimalSeparator: string, percentGroupSeparator: string, percentGroupSizes: number[]) {
			this.name = name;
			this.positiveSign = positiveSign;
			this.negativeSign = negativeSign;
			this.numberDecimalSeparator = numberDecimalSeparator;
			this.numberDecimalDigits = numberDecimalDigits;
			this.numberNegativePattern = numberNegativePattern;
			this.numberGroupSeparator = numberGroupSeparator;
			this.numberGroupSizes = numberGroupSizes;

			this.percentSymbol = percentSymbol;
			this.percentPositivePattern = percentPositivePattern;
			this.percentNegativePattern = percentNegativePattern;
			this.percentDecimalDigits = percentDecimalDigits;
			this.percentDecimalSeparator = percentDecimalSeparator;
			this.percentGroupSeparator = percentGroupSeparator ;
			this.percentGroupSizes = percentGroupSizes;
		}

		public static get invariantCulture() : CultureInfo {
			return CultureInfo._invariantCulture || (CultureInfo._invariantCulture = <#= GetCulture("\"\"", CultureInfo.InvariantCulture) #>);
		}

		public static get currentCulture() : CultureInfo {
			return CultureInfo._currentCulture || (CultureInfo._currentCulture = CultureInfo.getCulture((navigator as any).userLanguage || (navigator as any).browserLanguage || navigator.language));
		}

		public static getCulture(name: string): CultureInfo {
			if (name) {
				var k = name.substring(0, 2).toLowerCase();
				var c : CultureInfo;
				if (CultureInfo._cache) {
					c = CultureInfo._cache[k];
					if (c) {
						return c;
					}
				} else {
					CultureInfo._cache = {};
				}
				switch (k) {
<#
foreach(var g in CultureInfo.GetCultures(CultureTypes.NeutralCultures).Where(e => e.Name?.Length == 2).GroupBy(e => GetCulture(null, e)))
{
	foreach (var c in g) {
#>
					case "<#= c.Name.ToLower() #>":
<#
	}
#>
						c = <#= GetCulture("k", g.First()) #>;
						break;
<#
}
#>
				}
				if (c) {
					CultureInfo._cache[k] = c;
					return c;
				}
			}
			return CultureInfo.invariantCulture;
		}
	}
}
<#+
	public string GetCulture(string name, CultureInfo c) {
		var n = c.NumberFormat;
		string nnp;
		switch (n.NumberNegativePattern) {
			case 0:
				nnp = "Parenthesis";
				break;
			case 2:
				nnp = "LeftWithSpace";
				break;
			case 3:
				nnp = "Right";
				break;
			case 4:
				nnp = "RightWithSpace";
				break;
			case 1:
			default:
				nnp = "Left";
				break;
		}
		string ppp;
		switch	(n.PercentPositivePattern) {
			case 1:
				ppp = "Right";
				break;
			case 2:
				ppp = "Left";
				break;
			case 3:
				ppp = "LeftWithSpace";
				break;
			case 0:
			default:
				ppp = "RightWithSpace";
				break;
		}
		string pnp;
		switch (n.PercentNegativePattern) {
			case 1:
				pnp = "SignNumberPercent";
				break;
			case 2:
				pnp = "SignPercentNumber";
				break;
			case 3:
				pnp = "PercentSignNumber";
				break;
			case 4:
				pnp = "PercentNumberSign";
				break;
			case 5:
				pnp = "NumberSignPercent";
				break;
			case 6:
				pnp = "NumberPercentSign";
				break;
			case 7:
				pnp = "SignPercentSpaceNumber";
				break;
			case 8:
				pnp = "NumberSpacePercentSign";
				break;
			case 9:
				pnp = "PercentSpaceNumberSign";
				break;
			case 10:
				pnp = "PercentSpaceSignNumber";
				break;
			case 11:
				pnp = "NumberSignSpacePercent";
				break;
			case 0:
			default:
				pnp = "SignNumberSpacePercent";
				break;
		}
		return $"new CultureInfo({name}, \"{n.PositiveSign}\", \"{n.NegativeSign}\", \"{n.NumberDecimalSeparator}\""
				+ $", {n.NumberDecimalDigits}, SymbolPosition.{nnp}, \"{n.NumberGroupSeparator}\", [{string.Join(", ", n.NumberGroupSizes)}]"
				+ $", \"{n.PercentSymbol}\", SymbolPosition.{ppp}, PercentNegativePattern.{pnp}, {n.PercentDecimalDigits}"
				+ $", \"{n.PercentDecimalSeparator}\", \"{n.PercentGroupSeparator}\", [{string.Join(",", n.PercentGroupSizes)}])";
	}
#>