<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension="ts" #>
module Shipwreck {
	"use strict";
	export class CultureInfo {
		
		private static _cache: { [name: string]: CultureInfo };
		private static _invariantCulture : CultureInfo;
		private static _currentCulture: CultureInfo;
		
		public name: string;
		
		private _numberFormat: NumberFormatInfo;
		private _dateTimeFormat: DateTimeFormatInfo;

		private constructor(name: string) {
			this.name = name;
		}
		
		public get numberFormat(): NumberFormatInfo {
			return this._numberFormat || (this._numberFormat = NumberFormatInfo.getInstance(this.name));
		}

		public get dateTimeFormat(): DateTimeFormatInfo {
			return this._dateTimeFormat || (this._dateTimeFormat = DateTimeFormatInfo.getInstance(this.name));
		}

		public static get invariantCulture() : CultureInfo {
			return CultureInfo._invariantCulture || (CultureInfo._invariantCulture = new CultureInfo(""));
		}

		public static get currentCulture() : CultureInfo {
			return CultureInfo._currentCulture || (CultureInfo._currentCulture = CultureInfo.getCulture((navigator as any).userLanguage || (navigator as any).browserLanguage || navigator.language));
		}

		public static getCulture(name: string): CultureInfo {
			if (name) {
				var k = name.substring(0, 2).toLowerCase();
				var c : CultureInfo;
				if (CultureInfo._cache) {
					c = CultureInfo._cache[k];
					if (c) {
						return c;
					}
				} else {
					CultureInfo._cache = {};
				}
				c = new CultureInfo(k);
				CultureInfo._cache[k] = c;
				return c;
			}
			return CultureInfo.invariantCulture;
		}
	}
<#

var numberFields = new[]
{
	new { name = "positiveSign", type = "string" },
	new { name = "negativeSign", type = "string" },
	new { name = "positiveInifinitySymbol", type = "string" },
	new { name = "negativeInifinitySymbol", type = "string" },
	new { name = "NaNSymbol", type = "string" },
	new { name = "numberDecimalSeparator", type = "string" },
	new { name = "numberDecimalDigits", type = "number" },
	new { name = "numberNegativePattern", type = "SymbolPosition" },
	new { name = "numberGroupSeparator", type = "string" },
	new { name = "numberGroupSizes", type = "number[]" },
	new { name = "currencySymbol", type = "string" },
	new { name = "currencyPositivePattern", type = "SymbolPosition" },
	new { name = "currencyNegativePattern", type = "SymbolNegativePattern" },
	new { name = "currencyDecimalDigits", type = "number" },
	new { name = "currencyDecimalSeparator", type = "string" },
	new { name = "currencyGroupSeparator", type = "string" },
	new { name = "currencyGroupSizes", type = "number[]" },
	new { name = "percentSymbol", type = "string" },
	new { name = "percentPositivePattern", type = "SymbolPosition" },
	new { name = "percentNegativePattern", type = "SymbolNegativePattern" },
	new { name = "percentDecimalDigits", type = "number" },
	new { name = "percentDecimalSeparator", type = "string" },
	new { name = "percentGroupSeparator", type = "string" },
	new { name = "percentGroupSizes", type = "number[]" }
};

#>
	export class NumberFormatInfo {

		private static _invariantInfo: NumberFormatInfo;
		private static _cache: { [name: string]: NumberFormatInfo };

<#
foreach (var f in numberFields)
{
#>
		public <#= f.name #>: <#= f.type #>;
<#
}
#>
		private constructor(<#= string.Join(", ", numberFields.Select(f => $"{f.name}: {f.type}")) #>) {
<#
foreach (var f in numberFields)
{
#>
			this.<#= f.name #> = <#= f.name #>;
<#
}
#>
		}

		public numberType() : INumberTypeInfo {
			return {
				decimalSeparator: this.numberDecimalSeparator,
				decimalDigits: this.numberDecimalDigits,
				groupSeparator: this.numberGroupSeparator,
				groupSizes: this.numberGroupSizes
			};
		}
		public percentType() : INumberTypeInfo {
			return {
				decimalSeparator: this.percentDecimalSeparator,
				decimalDigits: this.percentDecimalDigits,
				groupSeparator: this.percentGroupSeparator,
				groupSizes: this.percentGroupSizes
			};
		}
		public currencyType() : INumberTypeInfo {
			return {
				decimalSeparator: this.currencyDecimalSeparator,
				decimalDigits: this.currencyDecimalDigits,
				groupSeparator: this.currencyGroupSeparator,
				groupSizes: this.currencyGroupSizes
			};
		}
		
		public static get invariantInfo() : NumberFormatInfo {
			return NumberFormatInfo._invariantInfo || (NumberFormatInfo._invariantInfo = <#= GetNumberFormatInfo(NumberFormatInfo.InvariantInfo) #>);
		}

		public static getInstance(name: string): NumberFormatInfo {
			if (name) {
				var k = name.substring(0, 2).toLowerCase();
				var c : NumberFormatInfo;
				if (NumberFormatInfo._cache) {
					c = NumberFormatInfo._cache[k];
					if (c) {
						return c;
					}
				} else {
					NumberFormatInfo._cache = {};
				}
				switch (k) {
<#
foreach(var g in CultureInfo.GetCultures(CultureTypes.NeutralCultures).Where(e => e.Name?.Length == 2).GroupBy(e => GetNumberFormatInfo(e.NumberFormat)))
{
	foreach (var c in g) {
#>
					case "<#= c.Name.ToLower() #>":
<#
	}
#>
						c = <#= g.Key #>;
						break;
<#
}
#>
				}
				if (c) {
					NumberFormatInfo._cache[k] = c;
					return c;
				}
			}
			return NumberFormatInfo.invariantInfo;
		}
	}
	
<#
	var dateTimeFields = new []
	{
		new { name = "fullDateTimePattern", type = "string" },
		new { name = "sortableDateTimePattern", type = "string" },
		new { name = "universalSortableDateTimePattern", type = "string" },
		new { name = "rfc1123Pattern", type = "string" },
		new { name = "yearMonthPattern", type = "string" },
		new { name = "monthDayPattern", type = "string" },
		new { name = "longDatePattern", type = "string" },
		new { name = "shortDatePattern", type = "string" },
		new { name = "longTimePattern", type = "string" },
		new { name = "shortTimePattern", type = "string" },
		new { name = "dateSeparator", type = "string" },
		new { name = "timeSeparator", type = "string" },
		new { name = "monthNames", type = "string[]" },
		new { name = "monthGenitiveNames", type = "string[]" },
		new { name = "abbreviatedMonthNames", type = "string[]" },
		new { name = "abbreviatedMonthGenitiveNames", type = "string[]" },
		new { name = "dayNames", type = "string[]" },
		new { name = "abbreviatedDayNames", type = "string[]" },
		new { name = "shortestDayNames", type = "string[]" },
		new { name = "amDesignator", type = "string" },
		new { name = "pmDesignator", type = "string" }
	};
#>
	export class DateTimeFormatInfo {

		private static _invariantInfo: DateTimeFormatInfo;
		private static _cache: { [name: string]: DateTimeFormatInfo };
		
<#
foreach (var f in dateTimeFields)
{
#>
		public <#= f.name #>: <#= f.type #>;
<#
}
#>
		private constructor(<#= string.Join(", ", dateTimeFields.Select(f => $"{f.name}: {f.type}")) #>) {
<#
foreach (var f in dateTimeFields)
{
#>
			this.<#= f.name #> = <#= f.name #>;
<#
}
#>
		}

		public static get invariantInfo() : DateTimeFormatInfo {
			return DateTimeFormatInfo._invariantInfo || (DateTimeFormatInfo._invariantInfo = <#= GetDateTimeFormatInfo(DateTimeFormatInfo.InvariantInfo) #>);
		}

		public static getInstance(name: string): DateTimeFormatInfo {
			if (name) {
				var k = name.substring(0, 2).toLowerCase();
				var c : DateTimeFormatInfo;
				if (DateTimeFormatInfo._cache) {
					c = DateTimeFormatInfo._cache[k];
					if (c) {
						return c;
					}
				} else {
					DateTimeFormatInfo._cache = {};
				}
				switch (k) {
<#
foreach(var g in CultureInfo.GetCultures(CultureTypes.NeutralCultures).Where(e => e.Name?.Length == 2).GroupBy(e => GetDateTimeFormatInfo(e.DateTimeFormat)))
{
	foreach (var c in g) {
#>
					case "<#= c.Name.ToLower() #>":
<#
	}
#>
						c = <#= g.Key #>;
						break;
<#
}
#>
				}
				if (c) {
					DateTimeFormatInfo._cache[k] = c;
					return c;
				}
			}
			return DateTimeFormatInfo.invariantInfo;
		}
	}
}
<#+
	public string GetArray(IEnumerable<int> values)
	{
		return "[" + string.Join(", ", values) + "]";
	}
	public string GetArray(IEnumerable<string> values)
	{
		return "[" + string.Join(", ", values.Select(s => $"\"{s}\"")) + "]";
	}
	public string GetNumberFormatInfo(NumberFormatInfo n) {
		string nnp;
		switch (n.NumberNegativePattern) {
			case 0:
				nnp = "Parenthesis";
				break;
			case 2:
				nnp = "LeftWithSpace";
				break;
			case 3:
				nnp = "Right";
				break;
			case 4:
				nnp = "RightWithSpace";
				break;
			case 1:
			default:
				nnp = "Left";
				break;
		}
		string cpp;
		switch	(n.CurrencyPositivePattern) {
			case 1:
				cpp = "Right";
				break;
			case 2:
				cpp = "LeftWithSpace";
				break;
			case 3:
				cpp = "RightWithSpace";
				break;
			case 0:
			default:
				cpp = "Left";
				break;
		}
		string cnp;
		switch (n.CurrencyNegativePattern) {
			case 1:
				cnp = "SignSymbolNumber";
				break;
			case 2:
				cnp = "SymbolSignNumber";
				break;
			case 3:
				cnp = "SymbolNumberSign";
				break;
			case 4:
				cnp = "ParenthesiedRight";
				break;
			case 5:
				cnp = "SignNumberSymbol";
				break;
			case 6:
				cnp = "NumberSignSymbol";
				break;
			case 7:
				cnp = "NumberSymbolSign";
				break;
			case 8:
				cnp = "SignNumberSpaceSymbol";
				break;
			case 9:
				cnp = "SignSymbolSpaceNumber";
				break;
			case 10:
				cnp = "NumberSpaceSymbolSign";
				break;
			case 11:
				cnp = "SymbolSpaceNumberSign";
				break;
			case 12:
				cnp = "SymbolSpaceSignNumber";
				break;
			case 13:
				cnp = "NumberSignSpaceSymbol";
				break;
			case 14:
				cnp = "ParenthesizedLeftWithSpace";
				break;
			case 15:
				cnp = "ParenthesizedRightWithSpace";
				break;
			case 0:
			default:
				cnp = "ParenthesizedLeft";
				break;
		}

		string ppp;
		switch	(n.PercentPositivePattern) {
			case 1:
				ppp = "Right";
				break;
			case 2:
				ppp = "Left";
				break;
			case 3:
				ppp = "LeftWithSpace";
				break;
			case 0:
			default:
				ppp = "RightWithSpace";
				break;
		}
		string pnp;
		switch (n.PercentNegativePattern) {
			case 1:
				pnp = "SignNumberSymbol";
				break;
			case 2:
				pnp = "SignSymbolNumber";
				break;
			case 3:
				pnp = "SymbolSignNumber";
				break;
			case 4:
				pnp = "SymbolNumberSign";
				break;
			case 5:
				pnp = "NumberSignSymbol";
				break;
			case 6:
				pnp = "NumberSymbolSign";
				break;
			case 7:
				pnp = "SignSymbolSpaceNumber";
				break;
			case 8:
				pnp = "NumberSpaceSymbolSign";
				break;
			case 9:
				pnp = "SymbolSpaceNumberSign";
				break;
			case 10:
				pnp = "SymbolSpaceSignNumber";
				break;
			case 11:
				pnp = "NumberSignSpaceSymbol";
				break;
			case 0:
			default:
				pnp = "SignNumberSpaceSymbol";
				break;
		}
		return $"new NumberFormatInfo(\"{n.PositiveSign}\", \"{n.NegativeSign}\""
				+ $", \"{n.PositiveInfinitySymbol}\", \"{n.NegativeInfinitySymbol}\", \"{n.NaNSymbol}\""
				+ $", \"{n.NumberDecimalSeparator}\", {n.NumberDecimalDigits}, SymbolPosition.{nnp}, \"{n.NumberGroupSeparator}\", {GetArray(n.NumberGroupSizes)}"
				+ $", \"{n.CurrencySymbol}\", SymbolPosition.{cpp}, SymbolNegativePattern.{cnp}, {n.CurrencyDecimalDigits}"
				+ $", \"{n.CurrencyDecimalSeparator}\", \"{n.CurrencyGroupSeparator}\", {GetArray(n.CurrencyGroupSizes)}"
				+ $", \"{n.PercentSymbol}\", SymbolPosition.{ppp}, SymbolNegativePattern.{pnp}, {n.PercentDecimalDigits}"
				+ $", \"{n.PercentDecimalSeparator}\", \"{n.PercentGroupSeparator}\", {GetArray(n.PercentGroupSizes)})";
	}
	public string GetDateTimeFormatInfo(DateTimeFormatInfo f) {
		return $"new DateTimeFormatInfo(\"{f.FullDateTimePattern}\","
+ $"\"{f.SortableDateTimePattern}\","
+ $"\"{f.UniversalSortableDateTimePattern}\","
+ $"\"{f.RFC1123Pattern}\","
+ $"\"{f.YearMonthPattern}\","
+ $"\"{f.MonthDayPattern}\","
+ $"\"{f.LongDatePattern}\","
+ $"\"{f.ShortDatePattern}\","
+ $"\"{f.LongTimePattern}\","
+ $"\"{f.ShortTimePattern}\","
+ $"\"{f.DateSeparator}\","
+ $"\"{f.TimeSeparator}\","
+ $"{GetArray(f.MonthNames)},"
+ $"{GetArray(f.MonthGenitiveNames)},"
+ $"{GetArray(f.AbbreviatedMonthNames)},"
+ $"{GetArray(f.AbbreviatedMonthGenitiveNames)},"
+ $"{GetArray(f.DayNames)},"
+ $"{GetArray(f.AbbreviatedDayNames)},"
+ $"{GetArray(f.ShortestDayNames)},"
+ $"\"{f.AMDesignator}\","
+ $"\"{f.PMDesignator}\")";
	}
#>